This a new [December 2012] set of programming tools for my 
ancient [2007; I was a very big noob] "BPF" virtual machine. 
This project is meant as a personal exercise in compiler programming.

Implementations of the "BPF" VM:
   https://sites.google.com/site/bl0ckeduserssoftware/past-projects 
   https://github.com/bl0ckeduser/blokvm 	[broken ?]

bpf-asm
=======
An assembler. complete.

bpf-compiler
============
Pseudo-BASIC-with-C-like syntax compiler. Let's say it's 99% complete;
all the things I could initially think of are there, but I could make
small additions or fix bugs etc.

The "test" directory in the main directory here contains complete
test programs, but there also test subdirectories for the compiler
and assembler.



-------------------------------------------------------------------------

The compiler's codegen could be written to generate code for a more
interesting VM or maybe even a real computer. Or the compiler could be 
improved, merged with a well-designed VM and hacked into a big REPL to create 
a script interpreter.

NOTE: an 32-bit x86 codegen (using gcc as the assembler) has been added,
so the compiler now supports a real machine. But the language is still the
same limited one: no functions, no pointers, etc. Future project: compiler
compiling a larger subset of C. Not sure if it would be possible to grow this
off this code.

NOTE: At the moment, I've only tested the x86 codegen on 64-bit Linux.
