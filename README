This a new [December 2012] set of programming tools targeting my 
ancient [2007; I was a very big noob] "BPF" virtual machine. 32-bit
x86 using GNU assembler has also been added as target.

This project is meant as a personal exercise in compiler programming.

The x86 compiler is frequently tested on FreeBSD and Linux.
It can also be built and used on MinGW, but I don't test that as often.

Below are some implementations of the "BPF" VM.
Both include the VM specs document and some demo programs in their tree.

 * https://github.com/bl0ckeduser/blokvm
	Was made in collaboration with darkf. Single clean 294-line
	SDL/C file.

 * https://sites.google.com/site/bl0ckeduserssoftware/past-projects#oldvm
	Made by me. 461 lines of SDL/C code spread across a few files.
	Not as lean as blokvm, but faster and more polished.

The License is an MIT one.

bpf-asm
=======
An assembler for BPF bytecodes. complete.

bpf-compiler
============
Pseudo-BASIC-with-C-like syntax compiler. Let's say it's 99% complete;
all the things I could initially think of are there, but I could make
small additions or fix bugs etc.

The "test" directory in the main directory here contains complete
test programs, but there also test subdirectories for the compiler
and assembler.

-------------------------------------------------------------------------

Future project ideas: 

The compiler could be improved, merged with a well-designed VM and 
hacked into a big REPL to create a script interpreter.

Supporting a larger subset of C ? Not sure if it would be possible to
do this by growing this code.

Support for other real architectures than x86, say e.g. powerpc or arm 
(PowerPC does not look easy.)

Support for popular serious VMs like JVM / .NET / LLVM
