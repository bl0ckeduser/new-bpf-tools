Features used but not compiled by the x86 compiler
==================================================

- "extern" prototypes
- function pointers (used in parser.c)
- multiple files
- preprocessor: #define #else #endif #ifdef #ifndef #include
  well it just ignores it for now. it mostly works for #include,
  but not for others
- external constants: NULL (for now can say "long NULL = 0x0" but 
			    that makes real C angry)
- "static" qualifier
- "unsigned" qualifier
- struct function return types (used in parser.c -- e.g. "exp_tree_t block();")

-------------------------------------------------------------------------

- switch/case/break/default
  UPDATE: well they seem to be mostly working now.
- enumerations
  e.g. enum { A = 0, B, C, ..., Z};
  UPDATE: mostly working now
- adjacent string concatenation	-- update: now DONE
- function prototypes
  e.g. typedesc_t tree_typeof_iter(typedesc_t, exp_tree_t*);
  UPDATE: some support for these. the main lacks at this point are:
    - blablabla blablabla(void), specifically the `(void)' thing
    - meta update: (void) should be working now
    - anal type conflict checking (would probably require an
      complicated recursive parallel tree walk, aghdsjdsfsd)
    - it seems not to work for empty () in some cases (!!!!!)
- struct and array initializers
  e.g. bob[] = {"a", "b", "c"}
  e.g. exp_tree_t null_tree = { 58, 0x0, 0, 0, 0x0 };
  e.g. char symtab[256][256] = {""};
  UPDATE: array initializers are a work-in-progress
