- do-while loops 				<--- DONE 2014-04-21
- constant folding in parser, as in e.g.

		int foo[1024 * 1024]; 		<--- DONE 2014-04-20

- #define macros, e.g.
	
	 #define foo(X,Y) x + y			<--- DONE 2014-05-19
							(easier ones working)

- wcc -w flag					<--- DONE 2014-04-30

- fancy initializers for structs, arrays, ...

- support for fancier things as global variables

- struct literals would be nice. also doing things like "= {0};" on a
  struct which apparently you can do. well I am no C language expert
  I don't know all the dozens of different syntaxes off my head

- block scope

- declaration in initializer in for-loop. 
   actually I think that goes with block scope, as far as I remember
   when you do that, the variable gets scoped to the associated block
   of the for-loop.

-------------------------------------

a nasty special case: consider some globals

char out[1];
void* outPointer = &out;


it complains it needs a constant initializer

&out is actually a constant, i guess, there should
be a way out of this one

*** partly addressed, 2014-10-24 ***

--------------------------------------


another thing to improve: the naive && and || x86 coding
chokes on this crappy old code i stupidly wrote in highschool:

            if (( (strcmp(makeValidString(theString[currentChar]),"+")==0 && quotationMarks==0)
                    || (strcmp(makeValidString(theString[currentChar]),"-")==0 && quotationMarks==0)
                    || strcmp(makeValidString(theString[currentChar]),"%")==0
                    || (strcmp(makeValidString(theString[currentChar]),"*")==0 && quotationMarks==0)
                    || strcmp(makeValidString(theString[currentChar]),"\"")==0
                    || (strcmp(makeValidString(theString[currentChar]),">")==0 && quotationMarks==0)
                    || (strcmp(makeValidString(theString[currentChar]),"<")==0 && quotationMarks==0)
                    || (strcmp(makeValidString(theString[currentChar]),"!")==0 && quotationMarks==0)
                    || (strcmp(makeValidString(theString[currentChar]),"=")==0 && quotationMarks==0)
                    || (strcmp(makeValidString(theString[currentChar]),"/")==0 && quotationMarks==0))
                    && !spaceAdded)
            {

it runs out of registers

we need to be clever about if (A && B && ...) patterns, and even recurse the shit
out of it

like... nested demorgan stuff ??

to code if(A && B && ... ), code some stuff that jumps to a particular
label (the else part) if any of A, B, ... are false

and then inside that, say A = a || b ||Â c || ... || 
now the code should jump to that else/end-of-if label if any is true

and so on.

or maybe even just a small change will do the job

*** addressed 2014-10-24 ***

-----------------------------------------

sizeof is not quite up to par...

		*** FIXED 2014-05-31 ***


for (i = 0; i < sizeof donald / sizeof(int); ++i)
                       ^
E: hw4-3.c: 59: please don't use pointers in incomprehensible ways

AST trace:

$ wcc --ast
for (i = 0; i < sizeof donald / sizeof(int); ++i)
		printf("%d ", donald[i]);
	printf("\n");

-------------------------------------------------------------
(BLOCK 
  (BLOCK 
    (ASGN (VARIABLE:i) (NUMBER:0))
  (WHILE (LT (VARIABLE:i) 
    (SIZEOF (DIV (VARIABLE:donald) 
                 (SIZEOF (CAST_TYPE (BASE_TYPE (INT_DECL))))))) 

    (BLOCK 
         (PROC_CALL:printf 
                   (STR_CONST:"%d ") 
                   (ARRAY (VARIABLE:donald) (VARIABLE:i))) 
         (CONTLAB) 
         (INC (VARIABLE:i))))) 
  (PROC_CALL:printf (STR_CONST:"\n")))


it's mis-parsing the sizeof part as: sizeof ( donald / sizeof(int) )
should be: sizeof(donald) / sizeof(int)

that sizeof fucker needs looser precedence i guess

------------------------

and it also fucks up when you mix it with commas:

$ wcc --ast
findKth(bar, 0, sizeof bar / sizeof(int) - 1, 4);

(BLOCK 
   (PROC_CALL:findKth 
     (VARIABLE:bar) 
     (NUMBER:0) 
     (SIZEOF 
        (SEQ 
	    (SUB 
                 (DIV 
                    (VARIABLE:bar)
                    (SIZEOF (CAST_TYPE (BASE_TYPE (INT_DECL))))) 
                 (NUMBER:1)) 
            (NUMBER:4)))))

Again sizeof must be looser-precedence'd I guess

It is misreading the above as: 

	findKth(bar, 0, sizeof (bar / sizeof(int) - 1, 4 ));

it's actually putting a comma-sequence into the sizeof!
